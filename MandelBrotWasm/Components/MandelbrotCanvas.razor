@using MandelBrotWasm.Logic

@inject IJSRuntime JSRuntime

@if (_busy)
{
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap" Style="position: absolute; width: 100%; height: 100%; z-index: 10; background: #000000CE">
        <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
            <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Value="@_progress" ShowValue="false" Mode="ProgressBarMode.Determinate" />
            <RadzenText Text="Rendering" />
        </RadzenStack>
    </RadzenStack>
}
<div style="width: 100%; height: 100vh;" @ontouchstart="OnTouchStart" @ontouchend="OnTouchEnd" @ontouchleave="OnTouchEnd" @ontouchmove="OnTouchMove" @onmousedown="@(() => _isMouseDown = true)" @onmouseup="@(() => _isMouseDown = false)" @onmouseleave="@(() => _isMouseDown = false)" @onmousemove="@OnMouseMove" @onmousewheel="@OnMouseWheel">
    <BECanvas @ref="_beCanvas" Width="@_width" Height="@_height" />
</div>

<ControlPanel RenderRequested="OnRenderRequested" PreviewRequested="OnPreviewRequested" Busy="@_busy" OffsetX="@((float?)_context?.OffsetX)" OffsetY="@((float?)_context?.OffsetY)" Zoom="@((float?)_context?.Scale)" />

@code {
    private BECanvasComponent _beCanvas;
    private MandelbrotRenderContext _context;
    private CpuMandelbrotRenderContext _cpuContext;
    private GpuMandelbrotRenderContext _gpuContext;
    private bool _busy = false;
    private bool _shouldRender = true;
    private bool _shouldPreview = false;
    private float _progress = 0f;
    private int _width = 800;
    private int _height = 600;

    private bool _isMouseDown = false;
    private bool _isScaling = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_busy)
        {
            if (firstRender)
            {
                _cpuContext = new CpuMandelbrotRenderContext(_beCanvas, JSRuntime);
                _cpuContext.OnPresent += OnPresent;
                _cpuContext.OnProgress += (sender, progress) => { _progress = float.Round(progress * 100f, 2); StateHasChanged(); };

                _gpuContext = new GpuMandelbrotRenderContext(_beCanvas, JSRuntime);
                _gpuContext.OnPresent += OnPresent;
                _gpuContext.OnProgress += (sender, progress) => { _progress = float.Round(progress * 100f, 2); StateHasChanged(); };

                _context = _gpuContext;
            }

            await _context.ResizeAsync();
            _width = _context.Width;
            _height = _context.Height;

            if (_shouldRender)
            {
                _busy = true;
                _shouldRender = false;

                //await HideImg();

                _context.Render();

                StateHasChanged();
            }
            else if (_shouldPreview)
            {
                _busy = true;
                _shouldPreview = false;
                //await HideImg();
                _context.Preview();
                StateHasChanged();
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async void OnRenderRequested(RenderRequestedEventArgs e)
    {
        if (e.RenderDevice == RenderDevice.CPU)
        {
            _context = _cpuContext;
        }
        else
        {
            _context = _gpuContext;
            await HideImg();
        }

        _context.MaxIterations = e.MaxIterations;
        _context.Scale = 1f / e.Zoom;
        _context.OffsetX = e.OffsetX;
        _context.OffsetY = e.OffsetY;
        _context.SetType = e.SetType;

        _shouldRender = true;

        StateHasChanged();
    }

    private async void OnPreviewRequested(RenderRequestedEventArgs e)
    {
        if (e.RenderDevice == RenderDevice.CPU)
        {
            _context = _cpuContext;
        }
        else
        {
            _context = _gpuContext;
            await HideImg();
        }

        _context.MaxIterations = e.MaxIterations;
        _context.Scale = 1f / e.Zoom;
        _context.OffsetX = e.OffsetX;
        _context.OffsetY = e.OffsetY;
        _context.SetType = e.SetType;

        _shouldPreview = true;

        StateHasChanged();
    }

    private async Task HideImg() => await JSRuntime.InvokeVoidAsync("hideImg");

    private void OnPresent(object? sender, EventArgs e)
    {
        _busy = false;
        StateHasChanged();
    }

    private void OnTouchStart(TouchEventArgs e)
    {
        _isMouseDown = true;
        _isScaling = e.Touches.Length > 1;
    }

    private void OnTouchEnd(TouchEventArgs e)
    {
        _isMouseDown = false;
        _isScaling = false;
    }

    private void OnTouchMove(TouchEventArgs e)
    {
        if (_isMouseDown)
        {
            if(_isScaling){
                if (e.Touches.Length > 1)
                {
                    var dx = e.Touches[0].ClientX - e.Touches[1].ClientX;
                    var dy = e.Touches[0].ClientY - e.Touches[1].ClientY;
                    var distance = Math.Sqrt(dx * dx + dy * dy);
                    _context.AddScale((float)distance / 1000f);
                }
            }else{
                _context.AddOffsetPx(-e.Touches[0].ClientX * 2, e.Touches[0].ClientY * 2);
                _shouldRender = true;
                StateHasChanged();
            }
        }
    }

    private void OnMouseMove(MouseEventArgs e)
    {
        if (_isMouseDown)
        {
            _context.AddOffsetPx(-e.MovementX * 2, e.MovementY * 2);

            _shouldRender = true;
            StateHasChanged();
        }
    }

    private void OnMouseWheel(WheelEventArgs e)
    {
        _context.AddScale(-e.DeltaY / 1000 * _context.Scale);
        _shouldRender = true;
        StateHasChanged();
    }
}
